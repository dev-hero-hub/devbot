'use strict';

// const { Telegram } = require('telegraf');

const Utils = require('./utils/utils');
const ConfigManager = require('./utils/config-manager');
const KeyboardManager = require('./utils/keyboard-manager');
// const KeyboardAction = require('./models/keyboard-action');
const ClientMessage = require('./models/client-message');

function AppService() {
  this.config = ConfigManager.get('telegram');
  this.previousAction = null;
}

AppService.prototype.start = function (context) {
  context.reply(ClientMessage.GREETING);
  this.keyboard(context);
};

AppService.prototype.keyboard = function (context) {
  context.reply(ClientMessage.OPTION, KeyboardManager.getBaseKeyboard());
};

AppService.prototype.python = function (context) {
  const messages = ['üåÆ–µ', '–ú–µ–¥–ª–µ–Ω–Ω—ã–π', 'PHP –ª—É—á—à–µ', '...–¥–ª—è –¥–µ—Ç–µ–π', '–ö—Ç–æ?'];
  context.reply(messages[Utils.random(0, messages.length)]);
};

AppService.prototype.node = function (context) {
  const messages = [
    '–¢–æ–ø!',
    '–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è',
    '–¢–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –∏–∑ –ª—É—á—à–∏—Ö –Ω–∞ –Ω–µ–π –ø–∏—à—É—Ç',
    '–î–ª—è –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤',
  ];
  context.reply(messages[Utils.random(0, messages.length)]);
};

AppService.prototype.php = function (context) {
  const messages = ['–ù–µ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤', '–°–µ—Ä—å—ë–∑–Ω—ã–π', '–û—Ç–ª–∏—á–Ω—ã–π —è–∑—ã–∫'];
  context.reply(messages[Utils.random(0, messages.length)]);
};

module.exports = new AppService();
